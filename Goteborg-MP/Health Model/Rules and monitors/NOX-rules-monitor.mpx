<ManagementPackFragment SchemaVersion="2.0" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <!--
%%
Description:
  A RULE that uses a PowerShell script to collect data and output/map it to Performance data for collection
  CompanyID - is a short abbreviation for your company with NO SPACES OR SPECIAL CHARACTERS ALLOWED
  AppName - is a short name for your app with NO SPACES OR SPECIAL CHARACTERS ALLOWED 
  UniqueID - Is a unique short description of the workflow purpose (NO SPACES OR SPECIAL CHARACTERS ALLOWED) such as "CountFilesInFolder"  
  ClassID - is the targeted class such as your custom class or Windows!Microsoft.Windows.Server.OperatingSystem
  ObjectName, CounterName, and InstanceName - you can make up in this case, as we are mapping the data from PowerShell to a made up Performance Counter

Version: 1.2
LastModified: 4-Nov-2017
%%

In this fragment you need to replace:
  community
  GoteborgCity
  AirQuality  
  Community.Goteborg.City.Class
  test
  testInstance
  testCounter

This fragment depends on references:
  RequiredReference: Alias="SC", ID="Microsoft.SystemCenter.Library"
  RequiredReference: Alias="System", ID="System.Library"	
  RequiredReference: Alias="Windows", ID="Microsoft.Windows.Library"
  RequiredReference: Alias="Perf", ID="System.Performance.Library"
  RequiredReference: Alias="MSDL", ID="Microsoft.SystemCenter.DataWarehouse.Library"

@@Author=Kevin Holman@@  
-->
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="community.GoteborgCity.AirQuality.NOX.Script.Perf.Datasource.2" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />

        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="Scheduler" TypeID="System!System.Scheduler">
                <Scheduler>
                  <SimpleReccuringSchedule>
                    <Interval Unit="Seconds">$Config/IntervalSeconds$</Interval>
                    <SyncTime>$Config/SyncTime$</SyncTime>
                  </SimpleReccuringSchedule>
                  <ExcludeDates />
                </Scheduler>
              </DataSource>
              <ProbeAction ID="PA" TypeID="Windows!Microsoft.Windows.PowerShellPropertyBagTriggerOnlyProbe">
                <ScriptName>community.GoteborgCity.AirQuality.NOX.Script.Perf.Datasource.2ps1</ScriptName>
                <ScriptBody>
                  #=================================================================================
                  #  Describe Script Here
                  #
                  #  Author:
                  #  v1.0
                  #=================================================================================


                  # Constants section - modify stuff here:
                  #=================================================================================
                  # Assign script name variable for use in event logging.
                  $ScriptName = "community.GoteborgCity.AirQuality.NOX.Script.Perf.Datasource.2ps1"
                  $EventID = "1234"
                  #=================================================================================


                  # Starting Script section - All scripts get this
                  #=================================================================================
                  # Gather the start time of the script
                  $StartTime = Get-Date
                  #Set variable to be used in logging events
                  $whoami = whoami
                  # Load MOMScript API
                  $momapi = New-Object -comObject MOM.ScriptAPI
                  # Load PropertyBag function
                  $bag = $momapi.CreatePropertyBag()
                  #Log script event that we are starting task
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script is starting. `n Running as ($whoami).")
                  #=================================================================================


                  # Begin MAIN script section
                  #=================================================================================
                  $air = Invoke-RestMethod -Method Get -Uri "http://data.goteborg.se/AirQualityService/v1.0/LatestMeasurement/aa0e2fb7-420d-4f77-a475-a06609e26b56?format=Json"

                  # Run through all AirQuality metrics and return the data one by one
                  $AirQuality = $air.AirQuality.NOx
                  $Counter = "NOx"
                  $Value = $AirQuality.Value
                  # Load PropertyBag function
                  $bag = $momapi.CreatePropertyBag()
                  #Adding the value from the script into the propertybag
                  $bag.AddValue("Counter", $Counter)
                  $bag.AddValue("Value", $Value)
                  $bag.AddValue("Result", $Value)

                  # Return all bags
                  $bag
                  #=================================================================================
                  # End MAIN script section


                  # End of script section
                  #=================================================================================
                  #Log an event for script ending and total execution time.
                  $EndTime = Get-Date
                  $ScriptTime = ($EndTime - $StartTime).TotalSeconds
                  $momapi.LogScriptEvent($ScriptName,$EventID,0,"`n Script Completed. `n Script Runtime: ($ScriptTime) seconds.")
                  #=================================================================================
                  # End of script
                </ScriptBody>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </ProbeAction>
            </MemberModules>
            <Composition>
              <Node ID="PA">
                <Node ID="Scheduler" />
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.PropertyBagData</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="community.GoteborgCity.AirQuality.NOX.Script.Monitor.MonitorType" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="Good" NoDetection="false" />
          <MonitorTypeState ID="Bad" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" type="xsd:integer" name="IntervalSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" type="xsd:string" name="SyncTime" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="TimeoutSeconds" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" type="xsd:integer" name="NOxThreshold" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
          <OverrideableParameter ID="NOxThreshold" Selector="$Config/NOxThreshold$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="community.GoteborgCity.AirQuality.NOX.Script.Perf.Datasource.2">
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
              <SyncTime>$Config/SyncTime$</SyncTime>
              <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
            </DataSource>
            <ConditionDetection ID="GoodFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>Less</Operator>
                  <ValueExpression>
                    <Value Type="Integer">$Config/NOxThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="BadFilter" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">Property[@Name='Result']</XPathQuery>
                  </ValueExpression>
                  <Operator>GreaterEqual</Operator>
                  <ValueExpression>
                    <Value Type="String">$Config/NOxThreshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="Good">
              <Node ID="GoodFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="Bad">
              <Node ID="BadFilter">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
          <OnDemandDetections>
            <OnDemandDetection MonitorTypeStateID="Good">
              <Node ID="GoodFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
            <OnDemandDetection MonitorTypeStateID="Bad">
              <Node ID="BadFilter">
                <Node ID="DS" />
              </Node>
            </OnDemandDetection>
          </OnDemandDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Rules>
      <Rule ID="community.GoteborgCity.AirQuality.NOX.Script.perf.Rule2" Enabled="true" Target="Community.Goteborg.City.Class" ConfirmDelivery="false" Remotable="true" Priority="Normal" DiscardLevel="100">
        <Category>PerformanceCollection</Category>
        <DataSources>
          <DataSource ID="DS" TypeID="community.GoteborgCity.AirQuality.NOX.Script.Perf.Datasource.2">
            <IntervalSeconds>300</IntervalSeconds>
            <SyncTime></SyncTime>
            <TimeoutSeconds>120</TimeoutSeconds>
          </DataSource>
        </DataSources>
        <ConditionDetection ID="System.Performance.DataGenericMapper" TypeID="Perf!System.Performance.DataGenericMapper">
          <ObjectName>AirQuality</ObjectName>
          <CounterName>NOx</CounterName>
          <InstanceName>Goteborg</InstanceName>
          <Value>$Data/Property[@Name='Value']$</Value>
        </ConditionDetection>
        <WriteActions>
          <WriteAction ID="WriteToDB" TypeID="SC!Microsoft.SystemCenter.CollectPerformanceData" />
          <!-- Can be optional - collect this data to the Operations Database.  -->
          <WriteAction ID="WriteToDW" TypeID="MSDL!Microsoft.SystemCenter.DataWarehouse.PublishPerformanceData" />
          <!-- Can be optional - collect this data to the Data Warehouse Database -->
        </WriteActions>
      </Rule>
    </Rules>
    <Monitors>
      <UnitMonitor ID="community.GoteborgCity.AirQuality.NOX.Script.Monitor2" Accessibility="Public" Enabled="true" Target="Community.Goteborg.City.Class" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="community.GoteborgCity.AirQuality.NOX.Script.Monitor.MonitorType" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="community.GoteborgCity.AirQuality.NOX.Script.Monitor2.Alert.Message">
          <AlertOnState>Warning</AlertOnState>
          <!-- Warning or Error should match OperationalStates below  -->
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>MatchMonitorHealth</AlertSeverity>
          <!-- Common options for AlertSeverity are MatchMonitorHealth, Information, Warning, Error -->
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="Good" MonitorTypeStateID="Good" HealthState="Success" />
          <OperationalState ID="Bad" MonitorTypeStateID="Bad" HealthState="Warning" />
          <!-- HealthState = Warning or Error -->
        </OperationalStates>
        <Configuration>
          <IntervalSeconds>300</IntervalSeconds>
          <SyncTime></SyncTime>
          <TimeoutSeconds>120</TimeoutSeconds>
          <NOxThreshold>20</NOxThreshold>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="community.GoteborgCity.AirQuality.NOX.Script.Monitor2.Alert.Message" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="community.GoteborgCity.AirQuality.NOX.Script.perf.Rule2">
          <Name>community GoteborgCity AirQuality Wind Speed Performance Collection</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="community.GoteborgCity.AirQuality.NOX.Script.Monitor2">
          <Name>community GoteborgCity AirQuality Wind Speed Monitor</Name>
          <Description></Description>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPackFragment>
